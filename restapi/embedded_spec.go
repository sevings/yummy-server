// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Mindwell",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/account/email": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "set new email",
        "parameters": [
          {
            "$ref": "#/parameters/formEmail"
          },
          {
            "$ref": "#/parameters/password"
          }
        ],
        "responses": {
          "200": {
            "description": "email has been set"
          },
          "400": {
            "description": "email is the same",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "password is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/email/{email}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "check if email is used",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "check result",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "isFree": {
                  "type": "boolean"
                }
              },
              "example": {
                "email": "mail@example.com",
                "isFree": true
              }
            }
          }
        }
      }
    },
    "/account/invites": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "invite list",
            "schema": {
              "type": "object",
              "properties": {
                "invites": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/login": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "$ref": "#/parameters/password"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/name/{name}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "check if name is used",
        "parameters": [
          {
            "$ref": "#/parameters/pathName"
          }
        ],
        "responses": {
          "200": {
            "description": "check result",
            "schema": {
              "type": "object",
              "properties": {
                "isFree": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                }
              },
              "example": {
                "isFree": false,
                "name": "example"
              }
            }
          }
        }
      }
    },
    "/account/password": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "change new password",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "old_password",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "new_password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "password has been set"
          },
          "403": {
            "description": "old password is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/recover": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "request reset password email",
        "parameters": [
          {
            "$ref": "#/parameters/formEmail"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Email not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/recover/password": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "reset password",
        "parameters": [
          {
            "$ref": "#/parameters/formEmail"
          },
          {
            "$ref": "#/parameters/password"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "date",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "name": "code",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed"
          },
          "400": {
            "description": "Email not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/register": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "register new account",
        "parameters": [
          {
            "$ref": "#/parameters/formEmail"
          },
          {
            "$ref": "#/parameters/password"
          },
          {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "full-date",
            "name": "birthday",
            "in": "formData"
          },
          {
            "enum": [
              "not set",
              "male",
              "female"
            ],
            "type": "string",
            "default": "not set",
            "name": "gender",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "country",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "city",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "400": {
            "description": "email or name already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/settings/email": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "email notification settings",
            "schema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "boolean"
                },
                "followers": {
                  "type": "boolean"
                },
                "invites": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "comments",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "followers",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "invites",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "email notification settings has been updated"
          }
        }
      }
    },
    "/account/subscribe/im": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "tinode connection token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/account/subscribe/telegram": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "telegram login token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/account/subscribe/token": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "centrifugo connection token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/account/verification": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "request verification email",
        "responses": {
          "200": {
            "description": "email has been sent"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/verification/{email}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "verify account email",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "name": "code",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "verified"
          },
          "400": {
            "description": "code or email is not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandfather": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "your grandson address",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "fullname": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandfather/status": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "status of your gifts",
            "schema": {
              "type": "object",
              "properties": {
                "received": {
                  "type": "boolean"
                },
                "sent": {
                  "type": "boolean"
                }
              }
            }
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "parameters": [
          {
            "type": "boolean",
            "name": "sent",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandson": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "your address",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "anonymous": {
                  "type": "boolean"
                },
                "comment": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "you're not allowed to participate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "registration finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "adm"
        ],
        "parameters": [
          {
            "maxLength": 50,
            "type": "string",
            "name": "postcode",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "country",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 500,
            "type": "string",
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 1000,
            "type": "string",
            "default": "",
            "name": "comment",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "anonymous",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "you're not allowed to participate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "registration finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandson/status": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "status of your gifts",
            "schema": {
              "type": "object",
              "properties": {
                "received": {
                  "type": "boolean"
                },
                "sent": {
                  "type": "boolean"
                }
              }
            }
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "parameters": [
          {
            "type": "boolean",
            "name": "received",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/stat": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "ADM stats",
            "schema": {
              "type": "object",
              "properties": {
                "grandsons": {
                  "type": "integer"
                },
                "received": {
                  "type": "integer"
                },
                "sent": {
                  "type": "integer"
                }
              }
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/comments/{id}/complain": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "type": "string",
            "default": "",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/comments/{id}/vote": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "positive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/design": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "design"
        ],
        "responses": {
          "200": {
            "description": "Design of your tlog",
            "schema": {
              "$ref": "#/definitions/Design"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "design"
        ],
        "parameters": [
          {
            "maxLength": 10000,
            "type": "string",
            "default": "",
            "name": "css",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-fA-F]{6}",
            "type": "string",
            "default": "#ffffff",
            "name": "backgroundColor",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-fA-F]{6}",
            "type": "string",
            "default": "#000000",
            "name": "textColor",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "fontFamily",
            "in": "formData"
          },
          {
            "type": "integer",
            "name": "fontSize",
            "in": "formData"
          },
          {
            "enum": [
              "left",
              "right",
              "center",
              "justify"
            ],
            "type": "string",
            "name": "textAlignment",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design of your tlog",
            "schema": {
              "$ref": "#/definitions/Design"
            }
          }
        }
      }
    },
    "/design/fonts": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "design"
        ],
        "responses": {
          "200": {
            "description": "List of available font families",
            "schema": {
              "type": "object",
              "properties": {
                "fonts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entries/anonymous": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          },
          {
            "$ref": "#/parameters/tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "images",
            "in": "formData"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            },
            "name": "tags",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "anonymous_comments",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        }
      }
    },
    "/entries/best": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "enum": [
              "month",
              "week"
            ],
            "type": "string",
            "default": "month",
            "name": "category",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/friends": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          },
          {
            "$ref": "#/parameters/tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/live": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "enum": [
              "entries",
              "comments",
              "waiting"
            ],
            "type": "string",
            "default": "entries",
            "name": "section",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/watching": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "images",
            "in": "formData"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            },
            "name": "tags",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "followers",
              "some",
              "me",
              "anonymous"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "visibleFor",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "isVotable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "inLive",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "anonymous_comments",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied or post in live restriction",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/comments": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "comments list",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/complain": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "type": "string",
            "default": "",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/favorite": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/vote": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "positive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/entries/{id}/watching": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/images": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Image",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/images/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "images"
        ],
        "responses": {
          "200": {
            "description": "Image",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "images"
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathId"
        }
      ]
    },
    "/me": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "your data",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "showName",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "male",
              "female",
              "not set"
            ],
            "type": "string",
            "default": "not set",
            "name": "gender",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "isDaylog",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "invited",
              "followers"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "full-date",
            "default": "",
            "name": "birthday",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "country",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "city",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "showInTops",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "your data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        }
      }
    },
    "/me/avatar": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me/cover": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me/favorites": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/me/followers": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/followings": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/hidden": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/ignored": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/images": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "Image list",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me/invited": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/online": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/me/requested": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/tlog": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          },
          {
            "$ref": "#/parameters/tag"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "images",
            "in": "formData"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            },
            "name": "tags",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "followers",
              "some",
              "me"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "visibleFor",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "isVotable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "inLive",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "post in live restriction",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "unread",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "notification list",
            "schema": {
              "$ref": "#/definitions/NotificationList"
            }
          }
        }
      }
    },
    "/notifications/read": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "type": "number",
            "default": 0,
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "unread count",
            "schema": {
              "type": "object",
              "properties": {
                "unread": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/pathId"
          }
        ],
        "responses": {
          "200": {
            "description": "notification",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/relations/from/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "summary": "permit the user to follow you",
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "summary": "cancel following request or unsubscribe the user",
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/relations/invited/{name}": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "relations"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/pathName"
          },
          {
            "pattern": "\\s*\\S+\\s+\\S+\\s+\\S+\\s*",
            "type": "string",
            "name": "invite",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "invited"
          },
          "403": {
            "description": "invalid invite or the user is invited already",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/relations/to/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "parameters": [
          {
            "enum": [
              "followed",
              "ignored",
              "hidden"
            ],
            "type": "string",
            "name": "r",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "enum": [
              "new",
              "rank",
              "waiting"
            ],
            "type": "string",
            "default": "new",
            "name": "top",
            "in": "query"
          },
          {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "top": {
                  "type": "string"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Friend"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/{name}/favorites": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/{name}/followers": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/{name}/followings": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/{name}/images": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "Image list",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/{name}/invited": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    },
    "/users/{name}/tlog": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/after"
          },
          {
            "$ref": "#/parameters/before"
          },
          {
            "$ref": "#/parameters/tag"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/pathName"
        }
      ]
    }
  },
  "definitions": {
    "AuthProfile": {
      "allOf": [
        {
          "$ref": "#/definitions/Profile"
        },
        {
          "type": "object",
          "properties": {
            "account": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "validThru": {
                  "type": "number",
                  "format": "double"
                },
                "verified": {
                  "type": "boolean"
                }
              }
            },
            "ban": {
              "type": "object",
              "properties": {
                "comment": {
                  "type": "number",
                  "format": "double"
                },
                "invite": {
                  "type": "number",
                  "format": "double"
                },
                "live": {
                  "type": "number",
                  "format": "double"
                },
                "vote": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "birthday": {
              "type": "string",
              "format": "full-date"
            },
            "showInTops": {
              "type": "boolean"
            }
          },
          "example": {
            "account": {
              "apiKey": "blah-blah-blah",
              "email": "mail@example.com",
              "validThru": 1531029717.333,
              "verified": true
            },
            "ban": {
              "comment": 1531029717.333,
              "invite": 1531029717.333,
              "live": 1531029717.333,
              "vote": 1531029717.333
            }
          }
        }
      ]
    },
    "Avatar": {
      "type": "object",
      "properties": {
        "x124": {
          "type": "string"
        },
        "x42": {
          "type": "string"
        },
        "x92": {
          "type": "string"
        }
      }
    },
    "Color": {
      "description": "color in rgb",
      "type": "string",
      "pattern": "#[0-9a-fA-F]{6}",
      "example": "#373737"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "number",
          "format": "double"
        },
        "editContent": {
          "type": "string"
        },
        "entryId": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "rights": {
          "type": "object",
          "properties": {
            "complain": {
              "type": "boolean"
            },
            "delete": {
              "type": "boolean"
            },
            "edit": {
              "type": "boolean"
            },
            "vote": {
              "type": "boolean"
            }
          }
        }
      },
      "example": {
        "content": "some multiline text \u003cbr\u003e with html",
        "createdAt": 1531029717.333,
        "editContent": "some multiline text \\n with html",
        "entryId": 152,
        "id": 999,
        "rights": {
          "delete": true,
          "edit": true,
          "vote": false
        }
      }
    },
    "CommentList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        }
      }
    },
    "Cover": {
      "type": "object",
      "properties": {
        "id": {
          "description": "user id",
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "x1920": {
          "type": "string"
        },
        "x318": {
          "type": "string"
        }
      }
    },
    "Design": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "$ref": "#/definitions/Color"
        },
        "css": {
          "type": "string"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "integer"
        },
        "textAlignment": {
          "type": "string",
          "enum": [
            "left",
            "right",
            "center",
            "justify"
          ]
        },
        "textColor": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "Entry": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "commentCount": {
          "type": "integer"
        },
        "comments": {
          "$ref": "#/definitions/CommentList"
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "number",
          "format": "double"
        },
        "cutContent": {
          "type": "string"
        },
        "cutTitle": {
          "type": "string"
        },
        "editContent": {
          "type": "string"
        },
        "hasCut": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "inLive": {
          "type": "boolean"
        },
        "isFavorited": {
          "type": "boolean"
        },
        "isWatching": {
          "type": "boolean"
        },
        "privacy": {
          "type": "string",
          "enum": [
            "all",
            "some",
            "me",
            "anonymous"
          ]
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "rights": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "boolean"
            },
            "complain": {
              "type": "boolean"
            },
            "delete": {
              "type": "boolean"
            },
            "edit": {
              "type": "boolean"
            },
            "vote": {
              "type": "boolean"
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "visibleFor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "wordCount": {
          "type": "integer"
        }
      },
      "example": {
        "commentCount": 0,
        "content": "\u003cp\u003esome text with \u003cb\u003ehtml\u003c/b\u003e tags\u003c/p\u003e",
        "createdAt": 1531029717.333,
        "editContent": "some text with *html* tags",
        "hasCut": false,
        "id": 152,
        "inLive": true,
        "isFavorited": false,
        "isVotable": true,
        "isWatching": true,
        "privacy": "all",
        "rating": -3,
        "rights": {
          "comment": true,
          "delete": false,
          "edit": false,
          "vote": true
        },
        "title": "example title",
        "wordCount": 5
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "Access denied"
      }
    },
    "FavoriteStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isFavorited": {
          "type": "boolean"
        }
      }
    },
    "Feed": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entry"
          }
        },
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        }
      }
    },
    "Friend": {
      "allOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "type": "object",
          "properties": {
            "counts": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "integer"
                },
                "days": {
                  "type": "integer"
                },
                "entries": {
                  "type": "integer"
                },
                "favorites": {
                  "type": "integer"
                },
                "followers": {
                  "type": "integer"
                },
                "followings": {
                  "type": "integer"
                },
                "ignored": {
                  "type": "integer"
                },
                "invited": {
                  "type": "integer"
                },
                "tags": {
                  "type": "integer"
                }
              }
            },
            "cover": {
              "$ref": "#/definitions/Cover"
            },
            "gender": {
              "type": "string",
              "enum": [
                "male",
                "female",
                "not set"
              ]
            },
            "lastSeenAt": {
              "type": "number",
              "format": "double"
            },
            "privacy": {
              "type": "string",
              "enum": [
                "all",
                "followers",
                "invited"
              ]
            },
            "rank": {
              "type": "number",
              "format": "int64"
            },
            "title": {
              "type": "string",
              "maxLength": 260
            }
          }
        }
      ]
    },
    "FriendList": {
      "type": "object",
      "properties": {
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        },
        "relation": {
          "type": "string",
          "enum": [
            "followers",
            "followings",
            "requested",
            "ignored",
            "hidden",
            "invited"
          ]
        },
        "subject": {
          "$ref": "#/definitions/User"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Friend"
          }
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isAnimated": {
          "type": "boolean"
        },
        "large": {
          "$ref": "#/definitions/ImageSize"
        },
        "medium": {
          "$ref": "#/definitions/ImageSize"
        },
        "processing": {
          "type": "boolean"
        },
        "small": {
          "$ref": "#/definitions/ImageSize"
        },
        "thumbnail": {
          "$ref": "#/definitions/ImageSize"
        }
      }
    },
    "ImageList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        }
      }
    },
    "ImageSize": {
      "type": "object",
      "properties": {
        "height": {
          "type": "integer"
        },
        "preview": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        },
        "createdAt": {
          "type": "number",
          "format": "double"
        },
        "entry": {
          "$ref": "#/definitions/Entry"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "read": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "comment",
            "follower",
            "request",
            "accept",
            "invite",
            "welcome",
            "invited",
            "adm_sent",
            "adm_received"
          ]
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "NotificationList": {
      "type": "object",
      "properties": {
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "unreadCount": {
          "type": "integer"
        }
      }
    },
    "Profile": {
      "allOf": [
        {
          "$ref": "#/definitions/Friend"
        },
        {
          "type": "object",
          "properties": {
            "ageLowerBound": {
              "type": "integer"
            },
            "ageUpperBound": {
              "type": "integer"
            },
            "city": {
              "type": "string",
              "maxLength": 50
            },
            "country": {
              "type": "string",
              "maxLength": 50
            },
            "createdAt": {
              "type": "number",
              "format": "double"
            },
            "design": {
              "$ref": "#/definitions/Design"
            },
            "invitedBy": {
              "$ref": "#/definitions/User"
            },
            "isDaylog": {
              "type": "boolean"
            },
            "relations": {
              "type": "object",
              "properties": {
                "fromMe": {
                  "type": "string",
                  "enum": [
                    "followed",
                    "requested",
                    "ignored",
                    "hidden",
                    "none"
                  ]
                },
                "isOpenForMe": {
                  "type": "boolean"
                },
                "toMe": {
                  "type": "string",
                  "enum": [
                    "followed",
                    "requested",
                    "ignored",
                    "hidden",
                    "none"
                  ]
                }
              }
            }
          },
          "example": {
            "city": "Казань",
            "country": "Россия",
            "counts": {
              "comments": 22,
              "entries": 13,
              "favorites": 1,
              "followers": 15,
              "followings": 4,
              "ignored": 0,
              "invited": 0,
              "tags": 0
            },
            "createdAt": 1531029717.333,
            "gender": "male",
            "isDaylog": false,
            "lastSeenAt": 1531029717.333,
            "privacy": "all",
            "rank": 17,
            "relations": {
              "fromMe": "followed",
              "toMe": "none"
            },
            "title": "some tlog title"
          }
        }
      ]
    },
    "Rating": {
      "type": "object",
      "properties": {
        "downCount": {
          "type": "integer"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isVotable": {
          "type": "boolean"
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "upCount": {
          "type": "integer"
        },
        "vote": {
          "type": "integer"
        }
      }
    },
    "Relationship": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "relation": {
          "type": "string",
          "enum": [
            "followed",
            "requested",
            "ignored",
            "hidden",
            "none"
          ]
        },
        "to": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "avatar": {
          "$ref": "#/definitions/Avatar"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isOnline": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "showName": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "example": {
        "id": 1,
        "isOnline": false,
        "name": "Mindwell",
        "showName": "Майндвелл"
      }
    },
    "UserID": {
      "type": "object",
      "properties": {
        "ban": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "boolean"
            },
            "invite": {
              "type": "boolean"
            },
            "live": {
              "type": "boolean"
            },
            "vote": {
              "type": "boolean"
            }
          }
        },
        "followersCount": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isInvited": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "negKarma": {
          "type": "boolean"
        }
      }
    },
    "WatchingStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isWatching": {
          "type": "boolean"
        }
      }
    }
  },
  "parameters": {
    "after": {
      "type": "string",
      "default": "",
      "name": "after",
      "in": "query"
    },
    "before": {
      "type": "string",
      "default": "",
      "name": "before",
      "in": "query"
    },
    "formEmail": {
      "maxLength": 500,
      "pattern": ".+@.+",
      "type": "string",
      "name": "email",
      "in": "formData",
      "required": true
    },
    "limit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer",
      "default": 30,
      "name": "limit",
      "in": "query"
    },
    "password": {
      "maxLength": 100,
      "minLength": 6,
      "type": "string",
      "name": "password",
      "in": "formData",
      "required": true
    },
    "pathId": {
      "minimum": 1,
      "type": "integer",
      "format": "int64",
      "name": "id",
      "in": "path",
      "required": true
    },
    "pathName": {
      "maxLength": 20,
      "minLength": 1,
      "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
      "type": "string",
      "name": "name",
      "in": "path",
      "required": true
    },
    "sort": {
      "enum": [
        "new",
        "old",
        "best"
      ],
      "type": "string",
      "default": "new",
      "name": "sort",
      "in": "query"
    },
    "tag": {
      "maxLength": 50,
      "type": "string",
      "name": "tag",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "ApiKeyHeader": {
      "type": "apiKey",
      "name": "X-User-Key",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Mindwell",
    "version": "0.1.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/account/email": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "set new email",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "email has been set"
          },
          "400": {
            "description": "email is the same",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "password is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/email/{email}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "check if email is used",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "check result",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "isFree": {
                  "type": "boolean"
                }
              },
              "example": {
                "email": "mail@example.com",
                "isFree": true
              }
            }
          }
        }
      }
    },
    "/account/invites": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "invite list",
            "schema": {
              "type": "object",
              "properties": {
                "invites": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/account/login": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "minLength": 1,
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "400": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/name/{name}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "check if name is used",
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "check result",
            "schema": {
              "type": "object",
              "properties": {
                "isFree": {
                  "type": "boolean"
                },
                "name": {
                  "type": "string"
                }
              },
              "example": {
                "isFree": false,
                "name": "example"
              }
            }
          }
        }
      }
    },
    "/account/password": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "change new password",
        "parameters": [
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "old_password",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "new_password",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "password has been set"
          },
          "403": {
            "description": "old password is invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/recover": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "request reset password email",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Email not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/recover/password": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "reset password",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "date",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "name": "code",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed"
          },
          "400": {
            "description": "Email not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/register": {
      "post": {
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "summary": "register new account",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "minLength": 6,
            "type": "string",
            "name": "password",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "format": "full-date",
            "name": "birthday",
            "in": "formData"
          },
          {
            "enum": [
              "not set",
              "male",
              "female"
            ],
            "type": "string",
            "default": "not set",
            "name": "gender",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "country",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "city",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          },
          "400": {
            "description": "email or name already exists",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/settings/email": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "email notification settings",
            "schema": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "boolean"
                },
                "followers": {
                  "type": "boolean"
                },
                "invites": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "account"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": false,
            "name": "comments",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "followers",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "invites",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "email notification settings has been updated"
          }
        }
      }
    },
    "/account/subscribe/im": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "tinode connection token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/account/subscribe/telegram": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "telegram login token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/account/subscribe/token": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "responses": {
          "200": {
            "description": "centrifugo connection token",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/account/verification": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "account"
        ],
        "summary": "request verification email",
        "responses": {
          "200": {
            "description": "email has been sent"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/account/verification/{email}": {
      "get": {
        "tags": [
          "account"
        ],
        "summary": "verify account email",
        "parameters": [
          {
            "maxLength": 500,
            "pattern": ".+@.+",
            "type": "string",
            "name": "email",
            "in": "path",
            "required": true
          },
          {
            "maxLength": 64,
            "minLength": 64,
            "type": "string",
            "name": "code",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "verified"
          },
          "400": {
            "description": "code or email is not valid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandfather": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "your grandson address",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "comment": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "fullname": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandfather/status": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "status of your gifts",
            "schema": {
              "type": "object",
              "properties": {
                "received": {
                  "type": "boolean"
                },
                "sent": {
                  "type": "boolean"
                }
              }
            }
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "parameters": [
          {
            "type": "boolean",
            "name": "sent",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandson": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "your address",
            "schema": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "anonymous": {
                  "type": "boolean"
                },
                "comment": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "postcode": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "you're not allowed to participate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "registration finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "adm"
        ],
        "parameters": [
          {
            "maxLength": 50,
            "type": "string",
            "name": "postcode",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "country",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 500,
            "type": "string",
            "name": "address",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 100,
            "type": "string",
            "name": "name",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 1000,
            "type": "string",
            "default": "",
            "name": "comment",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "anonymous",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "you're not allowed to participate",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "registration finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/grandson/status": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "status of your gifts",
            "schema": {
              "type": "object",
              "properties": {
                "received": {
                  "type": "boolean"
                },
                "sent": {
                  "type": "boolean"
                }
              }
            }
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "parameters": [
          {
            "type": "boolean",
            "name": "received",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "you're not registered in adm",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/adm/stat": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "adm"
        ],
        "responses": {
          "200": {
            "description": "ADM stats",
            "schema": {
              "type": "object",
              "properties": {
                "grandsons": {
                  "type": "integer"
                },
                "received": {
                  "type": "integer"
                },
                "sent": {
                  "type": "integer"
                }
              }
            }
          },
          "410": {
            "description": "adm finished",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/comments/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "comments"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/comments/{id}/complain": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "type": "string",
            "default": "",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/comments/{id}/vote": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "positive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Comment not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/design": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "design"
        ],
        "responses": {
          "200": {
            "description": "Design of your tlog",
            "schema": {
              "$ref": "#/definitions/Design"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "design"
        ],
        "parameters": [
          {
            "maxLength": 10000,
            "type": "string",
            "default": "",
            "name": "css",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-fA-F]{6}",
            "type": "string",
            "default": "#ffffff",
            "name": "backgroundColor",
            "in": "formData"
          },
          {
            "pattern": "#[0-9a-fA-F]{6}",
            "type": "string",
            "default": "#000000",
            "name": "textColor",
            "in": "formData"
          },
          {
            "type": "string",
            "name": "fontFamily",
            "in": "formData"
          },
          {
            "type": "integer",
            "name": "fontSize",
            "in": "formData"
          },
          {
            "enum": [
              "left",
              "right",
              "center",
              "justify"
            ],
            "type": "string",
            "name": "textAlignment",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design of your tlog",
            "schema": {
              "$ref": "#/definitions/Design"
            }
          }
        }
      }
    },
    "/design/fonts": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "design"
        ],
        "responses": {
          "200": {
            "description": "List of available font families",
            "schema": {
              "type": "object",
              "properties": {
                "fonts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/entries/anonymous": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "tag",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "images",
            "in": "formData"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            },
            "name": "tags",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "anonymous_comments",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        }
      }
    },
    "/entries/best": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "tag",
            "in": "query"
          },
          {
            "enum": [
              "month",
              "week"
            ],
            "type": "string",
            "default": "month",
            "name": "category",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/friends": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "tag",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/live": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "tag",
            "in": "query"
          },
          {
            "enum": [
              "entries",
              "comments",
              "waiting"
            ],
            "type": "string",
            "default": "entries",
            "name": "section",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/watching": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/entries/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "images",
            "in": "formData"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            },
            "name": "tags",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "followers",
              "some",
              "me",
              "anonymous"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "visibleFor",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "isVotable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "inLive",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "anonymous_comments",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "access denied or post in live restriction",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "entries"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/entries/{id}/comments": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "comments list",
            "schema": {
              "$ref": "#/definitions/CommentList"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "comments"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Comment data",
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/entries/{id}/complain": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "entries"
        ],
        "parameters": [
          {
            "maxLength": 1000,
            "type": "string",
            "default": "",
            "name": "content",
            "in": "formData"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/entries/{id}/favorite": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "favorite status",
            "schema": {
              "$ref": "#/definitions/FavoriteStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/entries/{id}/vote": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "parameters": [
          {
            "type": "boolean",
            "default": true,
            "name": "positive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "votes"
        ],
        "responses": {
          "200": {
            "description": "vote status",
            "schema": {
              "$ref": "#/definitions/Rating"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/entries/{id}/watching": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "watchings"
        ],
        "responses": {
          "200": {
            "description": "watching status",
            "schema": {
              "$ref": "#/definitions/WatchingStatus"
            }
          },
          "404": {
            "description": "Entry not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/images": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "images"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Image",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/images/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "images"
        ],
        "responses": {
          "200": {
            "description": "Image",
            "schema": {
              "$ref": "#/definitions/Image"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "images"
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Image not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "minimum": 1,
          "type": "integer",
          "format": "int64",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/me": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "responses": {
          "200": {
            "description": "your data",
            "schema": {
              "$ref": "#/definitions/AuthProfile"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "showName",
            "in": "formData",
            "required": true
          },
          {
            "enum": [
              "male",
              "female",
              "not set"
            ],
            "type": "string",
            "default": "not set",
            "name": "gender",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "isDaylog",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "invited",
              "followers"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData",
            "required": true
          },
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "full-date",
            "default": "",
            "name": "birthday",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "country",
            "in": "formData"
          },
          {
            "maxLength": 50,
            "type": "string",
            "default": "",
            "name": "city",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "showInTops",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "your data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        }
      }
    },
    "/me/avatar": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me/cover": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me/favorites": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      }
    },
    "/me/followers": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/followings": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/hidden": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/ignored": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/images": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Image list",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/me/invited": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/online": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "responses": {
          "204": {
            "description": "OK"
          }
        }
      }
    },
    "/me/requested": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          }
        }
      }
    },
    "/me/tlog": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "tag",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "me"
        ],
        "parameters": [
          {
            "maxLength": 500,
            "type": "string",
            "default": "",
            "name": "title",
            "in": "formData"
          },
          {
            "maxLength": 30000,
            "minLength": 1,
            "pattern": "\\s*\\S+.*",
            "type": "string",
            "name": "content",
            "in": "formData",
            "required": true
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "images",
            "in": "formData"
          },
          {
            "maxItems": 5,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string"
            },
            "name": "tags",
            "in": "formData"
          },
          {
            "enum": [
              "all",
              "followers",
              "some",
              "me"
            ],
            "type": "string",
            "name": "privacy",
            "in": "formData",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": "visibleFor",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "isVotable",
            "in": "formData"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "inLive",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Entry data",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "post in live restriction",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/notifications": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "name": "unread",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "notification list",
            "schema": {
              "$ref": "#/definitions/NotificationList"
            }
          }
        }
      }
    },
    "/notifications/read": {
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "type": "number",
            "default": 0,
            "name": "time",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "unread count",
            "schema": {
              "type": "object",
              "properties": {
                "unread": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/{id}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "notifications"
        ],
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "notification",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/relations/from/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "summary": "permit the user to follow you",
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "summary": "cancel following request or unsubscribe the user",
        "responses": {
          "200": {
            "description": "the user relationship with you",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/relations/invited/{name}": {
      "post": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "relations"
        ],
        "parameters": [
          {
            "maxLength": 20,
            "minLength": 1,
            "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "pattern": "\\s*\\S+\\s+\\S+\\s+\\S+\\s*",
            "type": "string",
            "name": "invite",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "invited"
          },
          "403": {
            "description": "invalid invite or the user is invited already",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/relations/to/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "parameters": [
          {
            "enum": [
              "followed",
              "ignored",
              "hidden"
            ],
            "type": "string",
            "name": "r",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "relations"
        ],
        "responses": {
          "200": {
            "description": "your relationship with the user",
            "schema": {
              "$ref": "#/definitions/Relationship"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "enum": [
              "new",
              "rank",
              "waiting"
            ],
            "type": "string",
            "default": "new",
            "name": "top",
            "in": "query"
          },
          {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string"
                },
                "top": {
                  "type": "string"
                },
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Friend"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{name}": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "responses": {
          "200": {
            "description": "User data",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{name}/favorites": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{name}/followers": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{name}/followings": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{name}/images": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Image list",
            "schema": {
              "$ref": "#/definitions/ImageList"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{name}/invited": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "User list",
            "schema": {
              "$ref": "#/definitions/FriendList"
            }
          },
          "403": {
            "description": "access denied",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    },
    "/users/{name}/tlog": {
      "get": {
        "security": [
          {
            "ApiKeyHeader": []
          }
        ],
        "tags": [
          "users"
        ],
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 30,
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "default": "",
            "name": "before",
            "in": "query"
          },
          {
            "maxLength": 50,
            "type": "string",
            "name": "tag",
            "in": "query"
          },
          {
            "enum": [
              "new",
              "old",
              "best"
            ],
            "type": "string",
            "default": "new",
            "name": "sort",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Entry list",
            "schema": {
              "$ref": "#/definitions/Feed"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "parameters": [
        {
          "maxLength": 20,
          "minLength": 1,
          "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
          "type": "string",
          "name": "name",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "AuthProfile": {
      "allOf": [
        {
          "$ref": "#/definitions/Profile"
        },
        {
          "type": "object",
          "properties": {
            "account": {
              "type": "object",
              "properties": {
                "apiKey": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "validThru": {
                  "type": "number",
                  "format": "double"
                },
                "verified": {
                  "type": "boolean"
                }
              }
            },
            "ban": {
              "type": "object",
              "properties": {
                "comment": {
                  "type": "number",
                  "format": "double"
                },
                "invite": {
                  "type": "number",
                  "format": "double"
                },
                "live": {
                  "type": "number",
                  "format": "double"
                },
                "vote": {
                  "type": "number",
                  "format": "double"
                }
              }
            },
            "birthday": {
              "type": "string",
              "format": "full-date"
            },
            "showInTops": {
              "type": "boolean"
            }
          },
          "example": {
            "account": {
              "apiKey": "blah-blah-blah",
              "email": "mail@example.com",
              "validThru": 1531029717.333,
              "verified": true
            },
            "ban": {
              "comment": 1531029717.333,
              "invite": 1531029717.333,
              "live": 1531029717.333,
              "vote": 1531029717.333
            }
          }
        }
      ]
    },
    "Avatar": {
      "type": "object",
      "properties": {
        "x124": {
          "type": "string"
        },
        "x42": {
          "type": "string"
        },
        "x92": {
          "type": "string"
        }
      }
    },
    "Color": {
      "description": "color in rgb",
      "type": "string",
      "pattern": "#[0-9a-fA-F]{6}",
      "example": "#373737"
    },
    "Comment": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "number",
          "format": "double"
        },
        "editContent": {
          "type": "string"
        },
        "entryId": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "rights": {
          "type": "object",
          "properties": {
            "complain": {
              "type": "boolean"
            },
            "delete": {
              "type": "boolean"
            },
            "edit": {
              "type": "boolean"
            },
            "vote": {
              "type": "boolean"
            }
          }
        }
      },
      "example": {
        "content": "some multiline text \u003cbr\u003e with html",
        "createdAt": 1531029717.333,
        "editContent": "some multiline text \\n with html",
        "entryId": 152,
        "id": 999,
        "rights": {
          "delete": true,
          "edit": true,
          "vote": false
        }
      }
    },
    "CommentList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        },
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        }
      }
    },
    "Cover": {
      "type": "object",
      "properties": {
        "id": {
          "description": "user id",
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "x1920": {
          "type": "string"
        },
        "x318": {
          "type": "string"
        }
      }
    },
    "Design": {
      "type": "object",
      "properties": {
        "backgroundColor": {
          "$ref": "#/definitions/Color"
        },
        "css": {
          "type": "string"
        },
        "fontFamily": {
          "type": "string"
        },
        "fontSize": {
          "type": "integer"
        },
        "textAlignment": {
          "type": "string",
          "enum": [
            "left",
            "right",
            "center",
            "justify"
          ]
        },
        "textColor": {
          "$ref": "#/definitions/Color"
        }
      }
    },
    "Entry": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "commentCount": {
          "type": "integer"
        },
        "comments": {
          "$ref": "#/definitions/CommentList"
        },
        "content": {
          "type": "string"
        },
        "createdAt": {
          "type": "number",
          "format": "double"
        },
        "cutContent": {
          "type": "string"
        },
        "cutTitle": {
          "type": "string"
        },
        "editContent": {
          "type": "string"
        },
        "hasCut": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "inLive": {
          "type": "boolean"
        },
        "isFavorited": {
          "type": "boolean"
        },
        "isWatching": {
          "type": "boolean"
        },
        "privacy": {
          "type": "string",
          "enum": [
            "all",
            "some",
            "me",
            "anonymous"
          ]
        },
        "rating": {
          "$ref": "#/definitions/Rating"
        },
        "rights": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "boolean"
            },
            "complain": {
              "type": "boolean"
            },
            "delete": {
              "type": "boolean"
            },
            "edit": {
              "type": "boolean"
            },
            "vote": {
              "type": "boolean"
            }
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "visibleFor": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "wordCount": {
          "type": "integer"
        }
      },
      "example": {
        "commentCount": 0,
        "content": "\u003cp\u003esome text with \u003cb\u003ehtml\u003c/b\u003e tags\u003c/p\u003e",
        "createdAt": 1531029717.333,
        "editContent": "some text with *html* tags",
        "hasCut": false,
        "id": 152,
        "inLive": true,
        "isFavorited": false,
        "isVotable": true,
        "isWatching": true,
        "privacy": "all",
        "rating": -3,
        "rights": {
          "comment": true,
          "delete": false,
          "edit": false,
          "vote": true
        },
        "title": "example title",
        "wordCount": 5
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "example": {
        "message": "Access denied"
      }
    },
    "FavoriteStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isFavorited": {
          "type": "boolean"
        }
      }
    },
    "Feed": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Entry"
          }
        },
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        }
      }
    },
    "Friend": {
      "allOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "type": "object",
          "properties": {
            "counts": {
              "type": "object",
              "properties": {
                "comments": {
                  "type": "integer"
                },
                "days": {
                  "type": "integer"
                },
                "entries": {
                  "type": "integer"
                },
                "favorites": {
                  "type": "integer"
                },
                "followers": {
                  "type": "integer"
                },
                "followings": {
                  "type": "integer"
                },
                "ignored": {
                  "type": "integer"
                },
                "invited": {
                  "type": "integer"
                },
                "tags": {
                  "type": "integer"
                }
              }
            },
            "cover": {
              "$ref": "#/definitions/Cover"
            },
            "gender": {
              "type": "string",
              "enum": [
                "male",
                "female",
                "not set"
              ]
            },
            "lastSeenAt": {
              "type": "number",
              "format": "double"
            },
            "privacy": {
              "type": "string",
              "enum": [
                "all",
                "followers",
                "invited"
              ]
            },
            "rank": {
              "type": "number",
              "format": "int64"
            },
            "title": {
              "type": "string",
              "maxLength": 260
            }
          }
        }
      ]
    },
    "FriendList": {
      "type": "object",
      "properties": {
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        },
        "relation": {
          "type": "string",
          "enum": [
            "followers",
            "followings",
            "requested",
            "ignored",
            "hidden",
            "invited"
          ]
        },
        "subject": {
          "$ref": "#/definitions/User"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Friend"
          }
        }
      }
    },
    "Image": {
      "type": "object",
      "properties": {
        "author": {
          "$ref": "#/definitions/User"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isAnimated": {
          "type": "boolean"
        },
        "large": {
          "$ref": "#/definitions/ImageSize"
        },
        "medium": {
          "$ref": "#/definitions/ImageSize"
        },
        "processing": {
          "type": "boolean"
        },
        "small": {
          "$ref": "#/definitions/ImageSize"
        },
        "thumbnail": {
          "$ref": "#/definitions/ImageSize"
        }
      }
    },
    "ImageList": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        },
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        }
      }
    },
    "ImageSize": {
      "type": "object",
      "properties": {
        "height": {
          "type": "integer"
        },
        "preview": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "width": {
          "type": "integer"
        }
      }
    },
    "Notification": {
      "type": "object",
      "properties": {
        "comment": {
          "$ref": "#/definitions/Comment"
        },
        "createdAt": {
          "type": "number",
          "format": "double"
        },
        "entry": {
          "$ref": "#/definitions/Entry"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "read": {
          "type": "boolean"
        },
        "type": {
          "type": "string",
          "enum": [
            "comment",
            "follower",
            "request",
            "accept",
            "invite",
            "welcome",
            "invited",
            "adm_sent",
            "adm_received"
          ]
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "NotificationList": {
      "type": "object",
      "properties": {
        "hasAfter": {
          "type": "boolean"
        },
        "hasBefore": {
          "type": "boolean"
        },
        "nextAfter": {
          "type": "string"
        },
        "nextBefore": {
          "type": "string"
        },
        "notifications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Notification"
          }
        },
        "unreadCount": {
          "type": "integer"
        }
      }
    },
    "Profile": {
      "allOf": [
        {
          "$ref": "#/definitions/Friend"
        },
        {
          "type": "object",
          "properties": {
            "ageLowerBound": {
              "type": "integer"
            },
            "ageUpperBound": {
              "type": "integer"
            },
            "city": {
              "type": "string",
              "maxLength": 50
            },
            "country": {
              "type": "string",
              "maxLength": 50
            },
            "createdAt": {
              "type": "number",
              "format": "double"
            },
            "design": {
              "$ref": "#/definitions/Design"
            },
            "invitedBy": {
              "$ref": "#/definitions/User"
            },
            "isDaylog": {
              "type": "boolean"
            },
            "relations": {
              "type": "object",
              "properties": {
                "fromMe": {
                  "type": "string",
                  "enum": [
                    "followed",
                    "requested",
                    "ignored",
                    "hidden",
                    "none"
                  ]
                },
                "isOpenForMe": {
                  "type": "boolean"
                },
                "toMe": {
                  "type": "string",
                  "enum": [
                    "followed",
                    "requested",
                    "ignored",
                    "hidden",
                    "none"
                  ]
                }
              }
            }
          },
          "example": {
            "city": "Казань",
            "country": "Россия",
            "counts": {
              "comments": 22,
              "entries": 13,
              "favorites": 1,
              "followers": 15,
              "followings": 4,
              "ignored": 0,
              "invited": 0,
              "tags": 0
            },
            "createdAt": 1531029717.333,
            "gender": "male",
            "isDaylog": false,
            "lastSeenAt": 1531029717.333,
            "privacy": "all",
            "rank": 17,
            "relations": {
              "fromMe": "followed",
              "toMe": "none"
            },
            "title": "some tlog title"
          }
        }
      ]
    },
    "Rating": {
      "type": "object",
      "properties": {
        "downCount": {
          "type": "integer"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isVotable": {
          "type": "boolean"
        },
        "rating": {
          "type": "number",
          "format": "float"
        },
        "upCount": {
          "type": "integer"
        },
        "vote": {
          "type": "integer"
        }
      }
    },
    "Relationship": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "relation": {
          "type": "string",
          "enum": [
            "followed",
            "requested",
            "ignored",
            "hidden",
            "none"
          ]
        },
        "to": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "avatar": {
          "$ref": "#/definitions/Avatar"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isOnline": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "showName": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        }
      },
      "example": {
        "id": 1,
        "isOnline": false,
        "name": "Mindwell",
        "showName": "Майндвелл"
      }
    },
    "UserID": {
      "type": "object",
      "properties": {
        "ban": {
          "type": "object",
          "properties": {
            "comment": {
              "type": "boolean"
            },
            "invite": {
              "type": "boolean"
            },
            "live": {
              "type": "boolean"
            },
            "vote": {
              "type": "boolean"
            }
          }
        },
        "followersCount": {
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "isInvited": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "negKarma": {
          "type": "boolean"
        }
      }
    },
    "WatchingStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "isWatching": {
          "type": "boolean"
        }
      }
    }
  },
  "parameters": {
    "after": {
      "type": "string",
      "default": "",
      "name": "after",
      "in": "query"
    },
    "before": {
      "type": "string",
      "default": "",
      "name": "before",
      "in": "query"
    },
    "formEmail": {
      "maxLength": 500,
      "pattern": ".+@.+",
      "type": "string",
      "name": "email",
      "in": "formData",
      "required": true
    },
    "limit": {
      "maximum": 100,
      "minimum": 1,
      "type": "integer",
      "default": 30,
      "name": "limit",
      "in": "query"
    },
    "password": {
      "maxLength": 100,
      "minLength": 6,
      "type": "string",
      "name": "password",
      "in": "formData",
      "required": true
    },
    "pathId": {
      "minimum": 1,
      "type": "integer",
      "format": "int64",
      "name": "id",
      "in": "path",
      "required": true
    },
    "pathName": {
      "maxLength": 20,
      "minLength": 1,
      "pattern": "[a-zA-Z][a-zA-Z0-9\\-_]*",
      "type": "string",
      "name": "name",
      "in": "path",
      "required": true
    },
    "sort": {
      "enum": [
        "new",
        "old",
        "best"
      ],
      "type": "string",
      "default": "new",
      "name": "sort",
      "in": "query"
    },
    "tag": {
      "maxLength": 50,
      "type": "string",
      "name": "tag",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "ApiKeyHeader": {
      "type": "apiKey",
      "name": "X-User-Key",
      "in": "header"
    }
  }
}`))
}
